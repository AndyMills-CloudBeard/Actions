# This GitHub Actions workflow validates Terraform configuration.

# The job performs the following steps:
# 1. Checks out the code using the 'actions/checkout' action.
# 2. Sets up Terraform using the 'hashicorp/setup-terraform' action
# 3. Initializes Terraform with no backend using the 'terraform init' command.
# 4. Validates the Terraform configuration using the 'terraform validate' command.
# 5. Creates a comment on the associated GitHub issue with the validation output using the 'actions/github-script' action.
# The comment includes the Terraform validation output enclosed in code blocks.
# The workflow continues even if the validation step fails.

name: Terraform Validate
on:
  workflow_call:

jobs:
  verify:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Initialise with no backend
      run: terraform init -backend=false

    - name: Validate Terraform
      id: validate
      run: |
        set +e
        OUTPUT=$(terraform validate)
        echo "$OUTPUT"
        echo "::set-output name=result::$OUTPUT"
        set -e
      continue-on-error: true

    - name: Create comment
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue_number = context.issue.number;
          const result = `${{ steps.validate.outputs.result }}`;
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            body: `Terraform validation output:\n\`\`\`\n${result}\n\`\`\``
          });